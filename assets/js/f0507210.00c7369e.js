"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9289],{9665:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=s(5893),r=s(1151);const o={id:"remote-language-server",title:"Remote Language Servers"},a=void 0,i={id:"integrations/remote-language-server",title:"Remote Language Servers",description:"Metals has experimental support to offload certain requests to a remote language",source:"@site/target/docs/integrations/remote-language-server.md",sourceDirName:"integrations",slug:"/integrations/remote-language-server",permalink:"/metals/docs/integrations/remote-language-server",draft:!1,unlisted:!1,editUrl:"https://github.com/scalameta/metals/edit/main/docs/integrations/remote-language-server.md",tags:[],version:"current",frontMatter:{id:"remote-language-server",title:"Remote Language Servers"},sidebar:"docs",previous:{title:"Making a release",permalink:"/metals/docs/contributors/releasing"},next:{title:"Integrating a new build tool",permalink:"/metals/docs/integrations/new-build-tool"}},c={},l=[{value:"Difference from local language servers",id:"difference-from-local-language-servers",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>textDocument/definition</code>",id:"textdocumentdefinition",level:3},{value:"<code>textDocument/references</code>",id:"textdocumentreferences",level:3},{value:"Open questions",id:"open-questions",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Metals has experimental support to offload certain requests to a remote language\nserver. This feature can be used to navigate large codebases when it's not\npossible to index all the code on a local computer."}),"\n",(0,t.jsx)(n.h2,{id:"difference-from-local-language-servers",children:"Difference from local language servers"}),"\n",(0,t.jsx)(n.p,{children:"There are some important differences between local and remote language servers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Instead of JSON-RPC, a remote language server responds to HTTP POST requests\nwith an ",(0,t.jsx)(n.code,{children:"application/json"})," header and a JSON-formatted body. The reason HTTP\nis chosen over JSON-RPC is because it makes the remote language server\naccessible from more clients, for example via ",(0,t.jsx)(n.code,{children:"curl"}),". A caveat with using HTTP\ninstead of JSON-RPC is that it's not possible for the remote language server\nto push notification down to the client. In the future, we could consider\nusing JSON-RPC via websockets instead."]}),"\n",(0,t.jsxs)(n.li,{children:["Instead of using absolute ",(0,t.jsx)(n.code,{children:"file://"})," URIs, a remote language server uses\nrelative ",(0,t.jsx)(n.code,{children:"source://"})," URIs. For example, the absolute URI\n",(0,t.jsx)(n.code,{children:"file://path/to/workspace/src/main/scala/Address.scala"})," becomes the relative\nURI ",(0,t.jsx)(n.code,{children:"source://src/main/scala/Address.scala"})," when communicating with a remote\nlanguage server."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.p,{children:["Each remote language server method expects a JSON-formatted body of type\n",(0,t.jsx)(n.code,{children:"JsonRpcRequest<T>"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface JsonRpcRequest<T> {\n  /** The JSON-RPC method name, for example textDocument/definition */\n  method: string;\n\n  /** The parameter for the JSON-RPC method, for example `TextDocumentPositionParams` */\n  params: T;\n\n  /** The ID of this request, can be any integer number. */\n  id: number;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"textdocumentdefinition",children:(0,t.jsx)(n.code,{children:"textDocument/definition"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"textDocument/definition"})," request is sent from the client to the server to\nget the list of definitions for a given position."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Request"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["method: ",(0,t.jsx)(n.code,{children:"textDocument/definition"})]}),"\n",(0,t.jsxs)(n.li,{children:["params: ",(0,t.jsx)(n.code,{children:"JsonRpcRequest<TextDocumentPositionParams>"}),", where\n",(0,t.jsx)(n.code,{children:"TextDocumentPositionParams"})," is defined in LSP."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Response"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["result: ",(0,t.jsx)(n.code,{children:"Location[]"}),", as defined in LSP."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Example request"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'curl --location --request POST \'http://remote-language-server.com\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "method": "textDocument/definition",\n  "params": {\n    "textDocument": {\n      "uri": "source://src/main/scala/Address.scala"\n    },\n    "position": {\n      "line": 5,\n      "character": 10\n    }\n  },\n  "id": 10\n}\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Example response"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "uri": "source://src/main/scala/User.scala",\n    "range": {\n      "start": { "line": 61, "character": 15 },\n      "end": { "line": 61, "character": 31 }\n    }\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"textdocumentreferences",children:(0,t.jsx)(n.code,{children:"textDocument/references"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"textDocument/references"})," request is sent from the client to the server to\nget the list of all references to a symbol at a given position."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Request"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["method: ",(0,t.jsx)(n.code,{children:"textDocument/references"})]}),"\n",(0,t.jsxs)(n.li,{children:["params: ",(0,t.jsx)(n.code,{children:"JsonRpcRequest<ReferenceParams>"}),", where ",(0,t.jsx)(n.code,{children:"ReferenceParams"})," is defined\nin LSP."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Response"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["result: ",(0,t.jsx)(n.code,{children:"Location[]"}),", as defined in LSP."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Example request"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'curl --location --request POST \'http://remote-language-server.com\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "method": "textDocument/references",\n  "params": {\n    "textDocument": {\n      "uri": "source://src/main/scala/Address.scala"\n    },\n    "position": {\n      "line": 5,\n      "character": 10\n    },\n    "context": {\n      "includeDeclaration": true\n    }\n  },\n  "id": 10\n}\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Example response"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "uri": "source://src/main/scala/User.scala",\n    "range": {\n      "start": { "line": 61, "character": 15 },\n      "end": { "line": 61, "character": 31 }\n    }\n  },\n  {\n    "uri": "source://src/main/scala/Country.scala",\n    "range": {\n      "start": { "line": 62, "character": 16 },\n      "end": { "line": 62, "character": 32 }\n    }\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"open-questions",children:"Open questions"}),"\n",(0,t.jsx)(n.p,{children:"The protocol for remote language servers is new and likely to have breaking\nchanges in upcoming releases. The protocol in this document should be considered\nas a proof-of-concept that demonstrates the feasibility of this approach. There\nremain a few open questions in order to extend remote language servers to\nsupport richer functionality:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"how do we ensure that results from the remote server are synchronized with the\nfile changes to the local disk?"}),"\n",(0,t.jsxs)(n.li,{children:["how do we combine local and remote ",(0,t.jsx)(n.code,{children:"workspace/symbol"})," results?"]}),"\n",(0,t.jsxs)(n.li,{children:["how should ",(0,t.jsx)(n.code,{children:"textDocument/definition"})," return results to library dependency\nsources that are not present on local disk?"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Given these open questions and the experimental status of remote language\nservers, this functionality may be removed from Metals in future releases\nwithout notice."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>a});var t=s(7294);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);