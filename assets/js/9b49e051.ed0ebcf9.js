"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3621],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?i.createElement(h,l(l({ref:t},u),{},{components:n})):i.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:r,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4817:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>u});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],a={id:"new-build-tool",title:"Integrating a new build tool"},s=void 0,p={unversionedId:"integrations/new-build-tool",id:"integrations/new-build-tool",title:"Integrating a new build tool",description:"Metals uses the",source:"@site/target/docs/integrations/new-build-tool.md",sourceDirName:"integrations",slug:"/integrations/new-build-tool",permalink:"/metals/docs/integrations/new-build-tool",editUrl:"https://github.com/scalameta/metals/edit/main/docs/integrations/new-build-tool.md",tags:[],version:"current",frontMatter:{id:"new-build-tool",title:"Integrating a new build tool"},sidebar:"docs",previous:{title:"Remote Language Servers",permalink:"/metals/docs/integrations/remote-language-server"},next:{title:"Integrating a new editor",permalink:"/metals/docs/integrations/new-editor"}},u=[{value:"Enable SemanticDB",id:"enable-semanticdb",children:[],level:2},{value:"Recommended compiler options",id:"recommended-compiler-options",children:[],level:2},{value:"Bloop build server",id:"bloop-build-server",children:[],level:2},{value:"Custom build server",id:"custom-build-server",children:[{value:"Server discovery",id:"server-discovery",children:[],level:3},{value:"Library bindings",id:"library-bindings",children:[],level:3},{value:"Manual tests",id:"manual-tests",children:[],level:3},{value:"Automated tests",id:"automated-tests",children:[],level:3},{value:"BSP endpoints",id:"bsp-endpoints",children:[],level:3}],level:2}],d={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Metals uses the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/bsp/blob/master/docs/bsp.md"},"Build Server Protocol"),"\n(BSP) to communicate with build tools. Any build tool that implements the\nprotocol should work with Metals."),(0,o.kt)("p",null,"There are two options for integrating Metals with a new build tool:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#bloop-build-server"},"via Bloop"),": emit Bloop JSON configuration files and use\nthe Bloop build server. The benefit of this approach is that it's simple to\nimplement but has the downside that compilation happens outside of your build\ntool."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#custom-build-server"},"via custom build server"),": add Build Server Protocol\nsupport to your build tool. The benefit of this approach is that Metals\nintegrates directly with your build tool, reproducing the same build\nenvironment as your current workflow. The downside of this approach is that it\nmost likely requires more effort compared to emitting Bloop JSON files.")),(0,o.kt)("h2",{id:"enable-semanticdb"},"Enable SemanticDB"),(0,o.kt)("p",null,"If you use the Bloop build server there is nothing that needs to be added in\norder to enable SemanticDB. Metals itself will communicate with Bloop to make\nsure proper options are enabled."),(0,o.kt)("p",null,"Otherwise, if you implement a custom build server, the\n",(0,o.kt)("a",{parentName:"p",href:"https://scalameta.org/docs/semanticdb/guide.html"},"SemanticDB")," compiler plugin\nis required for Metals code navigation to work. Only limited Metals features\nlike diagnostics and code formatting will work without the SemanticDB compiler\nplugin enabled."),(0,o.kt)("p",null,'Users get a warning from Metals when the build server does not enable the\nSemanticDB compiler plugin. Users have an option to suppress this warning by\nselecting a "Don\'t show again" option.'),(0,o.kt)("p",null,"Make sure to declare the compiler option ",(0,o.kt)("inlineCode",{parentName:"p"},'"-P:semanticdb:sourceroot:$WORKSPACE"'),"\nwhere ",(0,o.kt)("inlineCode",{parentName:"p"},"$WORKSPACE")," is the absolute path to the workspace root directory. By\ndefault, the sourceroot is inferred from the working directory of the compiler\nprocess, but it's better to explicitly declare it. If the sourceroot is\nmisconfigured, then Metals is unable to find the SemanticDB files created by the\ncompiler plugin."),(0,o.kt)("h2",{id:"recommended-compiler-options"},"Recommended compiler options"),(0,o.kt)("p",null,"We recommend you update the following compiler options when using Metals:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-Xlint"),": these warnings are helpful in the editor even if you don't have them\nenabled in your main build. Consult ",(0,o.kt)("inlineCode",{parentName:"li"},"scalac -Xlint:help")," for a full list of\navailable warnings."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-Xfatal-warnings"),": disable this setting even if you have it enabled in your\nmain build. Fatal warnings prevent code navigation from working when there are\nwarnings like 'unused import'.")),(0,o.kt)("h2",{id:"bloop-build-server"},"Bloop build server"),(0,o.kt)("p",null,"Consult the\n",(0,o.kt)("a",{parentName:"p",href:"https://scalacenter.github.io/bloop/docs/configuration-format/"},"Bloop configuration format"),'\nto learn how to emit Bloop JSON files. Once the JSON files have been generated,\nuse "',(0,o.kt)("a",{parentName:"p",href:"/metals/docs/integrations/new-editor#import-build"},"Connect to build server"),'" server\ncommand in Metals to establish a connection with Bloop.'),(0,o.kt)("h2",{id:"custom-build-server"},"Custom build server"),(0,o.kt)("p",null,"Consult the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/bsp/blob/master/docs/bsp.md"},"BSP specification"),"\nto learn about the protocol in detail."),(0,o.kt)("h3",{id:"server-discovery"},"Server discovery"),(0,o.kt)("p",null,"Metals automatically connects to a BSP server if the workspace root directory\ncontains a ",(0,o.kt)("inlineCode",{parentName:"p"},".bsp/$name.json"),' file. For example, a build tool named "Bill" will\nhave a ',(0,o.kt)("inlineCode",{parentName:"p"},".bsp/bill.json")," file with the following information."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Bill",\n  "version": "1.0.0",\n  "bspVersion": "2.0.0",\n  "languages": ["scala"],\n  "argv": ["bill", "bsp"]\n}\n')),(0,o.kt)("p",null,"When Metals detects a ",(0,o.kt)("inlineCode",{parentName:"p"},".bsp/bill.json")," file in the workspace:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it starts a new process ",(0,o.kt)("inlineCode",{parentName:"li"},"bill bsp"),", the command is derived from the ",(0,o.kt)("inlineCode",{parentName:"li"},"argv"),"\nfield in ",(0,o.kt)("inlineCode",{parentName:"li"},"bill.json"),"."),(0,o.kt)("li",{parentName:"ul"},"the working directory of the process is the workspace directory."),(0,o.kt)("li",{parentName:"ul"},"communication between Metals and the build server happens through standard\ninput/output.")),(0,o.kt)("p",null,"For a plug-and-play example of a build server, see ",(0,o.kt)("inlineCode",{parentName:"p"},"Bill.scala")," in the Metals\nrepository. Bill is a basic build server that is used for testing and\ndemonstration purposes only."),(0,o.kt)("h3",{id:"library-bindings"},"Library bindings"),(0,o.kt)("p",null,"There are two available libraries to implement a BSP server:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ch.epfl.scala:bsp4j"),": A Java library built with Java ",(0,o.kt)("inlineCode",{parentName:"li"},"CompletableFuture")," for\nasync primitives and GSON for JSON serialization. This module is used by\nMetals and the IntelliJ Scala plugin."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ch.epfl.scala:bsp4s"),": A Scala library built with Monix ",(0,o.kt)("inlineCode",{parentName:"li"},"Task"),"/",(0,o.kt)("inlineCode",{parentName:"li"},"Observable"),"\nfor async primitives and Circe for JSON for serialization. This module is used\nby the Bloop build server.")),(0,o.kt)("p",null,"Both libraries are compatible with each other. For example, it's OK to implement\na server with bsp4j and a client in bsp4s."),(0,o.kt)("h3",{id:"manual-tests"},"Manual tests"),(0,o.kt)("p",null,"You can manually test your build server integration by running Metals with your\neditor of choice."),(0,o.kt)("p",null,"Create the following trace files to spy on incoming/outgoing JSON communication\nbetween Metals and your build tool."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# macOS\ntouch ~/Library/Caches/org.scalameta.metals/bsp.trace.json\n# Linux\ntouch ~/.cache/metals/bsp.trace.json\n")),(0,o.kt)("p",null,"Metals must re-start to pick up the trace file."),(0,o.kt)("h3",{id:"automated-tests"},"Automated tests"),(0,o.kt)("p",null,"The Metals repository has infrastructure for running end-to-end integration\ntests with build servers. To test your build server integration, you can to\nclone the repository and write custom tests under\n",(0,o.kt)("inlineCode",{parentName:"p"},"tests/unit/src/test/scala/tests"),"."),(0,o.kt)("p",null,"If there is interest, we can publish a Metals ",(0,o.kt)("inlineCode",{parentName:"p"},"testkit")," module to make it\npossible to write tests outside the Metals repository."),(0,o.kt)("h3",{id:"bsp-endpoints"},"BSP endpoints"),(0,o.kt)("p",null,"Metals requires the following BSP endpoints to be implemented by the build\nserver."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"workspace/buildTargets"),": to list all the build targets in the workspace."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buildTarget/scalacOptions"),": to know the classpath and compiler options used\nto compile the project sources."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buildTarget/sources"),": to know what source files map to which build targets."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buildTarget/dependencySources"),': to support "Goto definition" for external\nlibraries.'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buildTarget/compile"),": to trigger compilation in a build target.")),(0,o.kt)("p",null,"Additionally, Metals expects the server to send the following notifications:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"buildTarget/publishDiagnostics"),": To report compile errors and warnings in the\neditor buffer.")))}c.isMDXComponent=!0}}]);