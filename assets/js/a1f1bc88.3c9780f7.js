"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9567],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,u=c["".concat(s,".").concat(m)]||c[m]||h[m]||r;return n?i.createElement(u,l(l({ref:t},p),{},{components:n})):i.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={id:"tree-view-protocol",title:"Tree View Protocol"},s=void 0,d={unversionedId:"integrations/tree-view-protocol",id:"integrations/tree-view-protocol",title:"Tree View Protocol",description:'Metals implements a Language Server Protocol extension called the "Tree View',source:"@site/target/docs/integrations/tree-view-protocol.md",sourceDirName:"integrations",slug:"/integrations/tree-view-protocol",permalink:"/metals/docs/integrations/tree-view-protocol",draft:!1,editUrl:"https://github.com/scalameta/metals/edit/main/docs/integrations/tree-view-protocol.md",tags:[],version:"current",frontMatter:{id:"tree-view-protocol",title:"Tree View Protocol"},sidebar:"docs",previous:{title:"Test Explorer",permalink:"/metals/docs/integrations/test-explorer"},next:{title:"Decoration Protocol",permalink:"/metals/docs/integrations/decoration-protocol"}},p={},c=[{value:"Base data structures",id:"base-data-structures",level:2},{value:"Tree View",id:"tree-view",level:3},{value:"Tree View Node",id:"tree-view-node",level:3},{value:"Tree View Command",id:"tree-view-command",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"<code>initialize</code>",id:"initialize",level:3},{value:"<code>metals/treeViewChildren</code>",id:"metalstreeviewchildren",level:3},{value:"<code>metals/treeViewParent</code>",id:"metalstreeviewparent",level:3},{value:"<code>metals/treeViewDidChange</code>",id:"metalstreeviewdidchange",level:3},{value:"<code>metals/treeViewVisibilityDidChange</code>",id:"metalstreeviewvisibilitydidchange",level:3},{value:"<code>metals/treeViewNodeCollapseDidChange</code>",id:"metalstreeviewnodecollapsedidchange",level:3},{value:"<code>metals/treeViewReveal</code>",id:"metalstreeviewreveal",level:3}],h={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Metals implements a Language Server Protocol extension called the "Tree View\nProtocol" to render tree views in the editor client.'),(0,r.kt)("h2",{id:"base-data-structures"},"Base data structures"),(0,r.kt)("h3",{id:"tree-view"},"Tree View"),(0,r.kt)("p",null,'One "tree view" represents the root of a tree along with all of its descendent\ntree nodes. Multiple tree views can be displayed at the same time in an editor\nclient.'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://i.imgur.com/FRWL3Aq.png",alt:"Example tree views"})),(0,r.kt)("p",null,"A tree view is uniquely identified by a ",(0,r.kt)("inlineCode",{parentName:"p"},"viewId: string")," field in other data\nstructures."),(0,r.kt)("h3",{id:"tree-view-node"},"Tree View Node"),(0,r.kt)("p",null,"A tree view can contain multiple tree view nodes. A tree view node can have the\nfollowing metadata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface TreeViewNode {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of this node, or undefined if node is a root of the tree. */\n  nodeUri?: string;\n  /** The title to display for this node. */\n  label: string;\n  /** An optional command to trigger when the user clicks on node. */\n  command?: Command;\n  /** An optional SVG icon to display next to the label of this node. */\n  icon?: string;\n  /** An optional description of this node that is displayed when the user hovers over this node. */\n  tooltip?: string;\n  /**\n   * Whether this tree node should be collapsed, expanded or if it has no children.\n   *\n   * - undefined: this node has no children.\n   * - collapsed: this node has children and this node should be auto-expanded\n   *   on the first load.\n   * - expanded: this node has children and the user should manually expand\n   *   this node to see the children.\n   */\n  collapseState?: "expanded" | "collapsed";\n}\n')),(0,r.kt)("p",null,"The children of a tree view node can be obtained through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"metals/treeViewChildren")," request."),(0,r.kt)("h3",{id:"tree-view-command"},"Tree View Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * A command to execute on the client when the user clicks on a tree view node.\n */\ninterface TreeViewCommand {\n  /** The title of the command, the client is free to not display this title in the UI. */\n  title: string;\n  /** The identifier of the command that should be executed by the client. */\n  command: string;\n  /** A description of what this command does. */\n  tooltip?: string;\n  /** Optional arguments to invoke the command with. */\n  arguments?: any[];\n}\n")),(0,r.kt)("h2",{id:"endpoints"},"Endpoints"),(0,r.kt)("p",null,"The Tree View Protocol (TVP) consists of several JSON-RPC requests and\nnotification endpoints."),(0,r.kt)("h3",{id:"initialize"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialize")),(0,r.kt)("p",null,"The Tree View Protocol is only enabled when both the client and server declare\nsupport for the protocol by adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"treeViewProvider: true")," field to the\nexperimental section of the server and client capabilities in the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize"),"\nresponse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "capabilities": {\n    "experimental": {\n      "treeViewProvider": true\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"metalstreeviewchildren"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewChildren")),(0,r.kt)("p",null,"The tree view children request is sent from the client to the server to get the\nchildren nodes of a tree view node. The client is safe to cache the response of\nthe children until server sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"metals/treeViewDidChange")," notification for\nthe parent node or one of its ancestor nodes."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Request"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewChildren")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewChildrenParams")," defined as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewChildrenParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of the parent node or undefined when listing the root node. */\n  nodeUri?: string;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Response"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"result: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewChildrenResult")," defined as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewChildrenResult {\n  /** The child nodes of the requested parent node. */\n  nodes: TreeViewNode[];\n}\n")),(0,r.kt)("h3",{id:"metalstreeviewparent"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewParent")),(0,r.kt)("p",null,"The tree view parent request is sent from the client to the server to obtain the\nparent node of a child node. The ",(0,r.kt)("inlineCode",{parentName:"p"},"metals/treeViewParent")," endpoint is required to\nsupport ",(0,r.kt)("inlineCode",{parentName:"p"},"metals/treeViewReveal"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Request"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewParent")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewParentParams")," defined as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewParentParams {\n  /** The ID of the view that the nodeUri is associated with. */\n  viewId: string;\n  /** The URI of the child node. */\n  nodeUri: string;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Response"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"result: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewParentResult")," defined as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewParentResult {\n  /** The parent node URI or undefined when the parent is the root node. */\n  uri?: string;\n}\n")),(0,r.kt)("h3",{id:"metalstreeviewdidchange"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewDidChange")),(0,r.kt)("p",null,"The tree view did change notification is sent from the server to the client to\nnotify that the metadata about a given tree view node has changed."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Notification"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewVisibilityDidChange")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewDidChangeParams")," defined as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewDidChangeParams {\n  /** The nodes that have changed. */\n  nodes: TreeViewNode[];\n}\n")),(0,r.kt)("h3",{id:"metalstreeviewvisibilitydidchange"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewVisibilityDidChange")),(0,r.kt)("p",null,"The visibility did change notification is sent from the client to the server to\nnotify that the visibility of a tree view has changed."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Notification"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewVisibilityDidChange")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewVisibilityDidChangeParams")," defined as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewVisibilityDidChangeParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** True if the node is visible in the editor UI, false otherwise. */\n  visible: boolean;\n}\n")),(0,r.kt)("h3",{id:"metalstreeviewnodecollapsedidchange"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewNodeCollapseDidChange")),(0,r.kt)("p",null,"The collapse did change notification is sent from the client to the server to\nnotify that a tree node has either been collapsed or expanded."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Notification"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewNodeCollapseDidChange")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewNodeCollapseDidChangeParams")," defined as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TreeViewNodeCollapseDidChangeParams {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /** The URI of the node that was collapsed or expanded. */\n  nodeUri: string;\n  /** True if the node is collapsed, false if the node was expanded. */\n  collapsed: boolean;\n}\n")),(0,r.kt)("h3",{id:"metalstreeviewreveal"},(0,r.kt)("inlineCode",{parentName:"h3"},"metals/treeViewReveal")),(0,r.kt)("p",null,"The reveal request is sent from the client to the server to convert a text\ndocument position into it's corresponding tree view node."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Request"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method: ",(0,r.kt)("inlineCode",{parentName:"li"},"metals/treeViewReveal")),(0,r.kt)("li",{parentName:"ul"},"params: ",(0,r.kt)("inlineCode",{parentName:"li"},"TextDocumentPositionParams"),", as defined in LSP.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Response"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"result: ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeViewRevealResult")," defined as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface MetalsTreeRevealResult {\n  /** The ID of the view that this node is associated with. */\n  viewId: string;\n  /**\n   * The list of URIs for the node to reveal and all of its ancestor parents.\n   *\n   * The node to reveal is at index 0, it's parent is at index 1 and so forth\n   * up until the root node.\n   */\n  uriChain: string[];\n}\n")),(0,r.kt)("p",null,"Example implementation of the reveal request."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/1408093/60284529-0d1a5e80-990c-11e9-853a-0aa0f6e12993.gif",alt:"2019-06-27 18 47 17"})))}m.isMDXComponent=!0}}]);