"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8840],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],l={id:"debug-adapter-protocol",sidebar_label:"Running and debugging",title:"Running and debugging"},s=void 0,d={unversionedId:"integrations/debug-adapter-protocol",id:"integrations/debug-adapter-protocol",title:"Running and debugging",description:"Metals implements the Debug Adapter Protocol, which can be used by the editor to",source:"@site/target/docs/integrations/debug-adapter-protocol.md",sourceDirName:"integrations",slug:"/integrations/debug-adapter-protocol",permalink:"/metals/docs/integrations/debug-adapter-protocol",draft:!1,editUrl:"https://github.com/scalameta/metals/edit/main/docs/integrations/debug-adapter-protocol.md",tags:[],version:"current",frontMatter:{id:"debug-adapter-protocol",sidebar_label:"Running and debugging",title:"Running and debugging"},sidebar:"docs",previous:{title:"Decoration Protocol",permalink:"/metals/docs/integrations/decoration-protocol"},next:{title:"Proxy and mirrors",permalink:"/metals/docs/troubleshooting/proxy"}},p={},u=[{value:"How to add support for debugging or running in my editor?",id:"how-to-add-support-for-debugging-or-running-in-my-editor",level:2},{value:"Via code lenses",id:"via-code-lenses",level:3},{value:"Via explicit main or test commands",id:"via-explicit-main-or-test-commands",level:3},{value:"Wiring it all together",id:"wiring-it-all-together",level:3},{value:"Supported Testing Frameworks",id:"supported-testing-frameworks",level:2},{value:"Debugging the connection",id:"debugging-the-connection",level:2}],c={toc:u},m="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Metals implements the Debug Adapter Protocol, which can be used by the editor to\ncommunicate with JVM to run and debug code. Alternatively, Metals is also able\nto provide editors with all the information needed to run the code (this is\ncurrently supported in run code lenses for main classes)."),(0,o.kt)("h2",{id:"how-to-add-support-for-debugging-or-running-in-my-editor"},"How to add support for debugging or running in my editor?"),(0,o.kt)("p",null,"There are two main ways to add support for debugging depending on the\ncapabilities exposed by the client."),(0,o.kt)("h3",{id:"via-code-lenses"},"Via code lenses"),(0,o.kt)("p",null,"If you want to use DAP the editor needs to handle two commands in its language\nclient extension:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalameta/metals/blob/main/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala"},(0,o.kt)("inlineCode",{parentName:"a"},"metals-run-session-start")),"\nand\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalameta/metals/blob/main/metals/src/main/scala/scala/meta/internal/metals/ClientCommands.scala"},(0,o.kt)("inlineCode",{parentName:"a"},"metals-debug-session-start")),".\nThese commands should get executed automatically by the LSP client once the user\nactivates a code lens. The difference between them is that the former ignores\nall breakpoints being set while the latter respects them. The procedure of\nstarting the run/debug session is as follows:"),(0,o.kt)("p",null,"Then we can request the debug adapter URI from the metals server using the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalameta/metals/blob/master/metals/src/main/scala/scala/meta/internal/metals/ServerCommands.scala"},(0,o.kt)("inlineCode",{parentName:"a"},"debug-adapter-start")),"\ncommand."),(0,o.kt)("p",null,"Starting a Debug Adapter Protocol session might take some time, since it needs\nto set up all the neccesary utilities for debugging. Metals also provides a\n",(0,o.kt)("inlineCode",{parentName:"p"},"shellCommand")," field, which will be present in the command attached to the run\nmain methods code lenses. This field can be used to simply run the process\nquickly without the debugging capabilities."),(0,o.kt)("p",null,"If you can't or won't support DAP, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"runProvider")," instead of\n",(0,o.kt)("inlineCode",{parentName:"p"},"debugProvider "),"option in the initialization options sent from the editor to the\nMetals server. This will make sure that only the ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," code lense show up with\nthe needed ",(0,o.kt)("inlineCode",{parentName:"p"},"shellCommand")," field."),(0,o.kt)("h3",{id:"via-explicit-main-or-test-commands"},"Via explicit main or test commands"),(0,o.kt)("p",null,"Apart from using code lenses, users can start a debug session by executing the\n",(0,o.kt)("inlineCode",{parentName:"p"},"debug-adapter-start")," command with any of following params:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for an explicit main class")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "mainClass": "com.foo.App",\n  "buildTarget": "foo",\n  "args": ["bar"],\n  "jvmOptions": ["-Dpropert=123"],\n  "env": { "RETRY": "TRUE" },\n  "envFile": ".env"\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for an explicit test class")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "testClass": "com.foo.FooSuite",\n  "buildTarget": "foo"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"buildTarget")," is an optional parameter, which might be useful if there are\nidentically named classes in different modules. A URI will be returned that can\nbe used by the DAP client."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"envFile")," is an optional parameter, which allows you to specify a path to a\n",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file with additional environment variables. The path can be either\nabsolute or relative to your project workspace. The parser supports single line\nas well as multi-line quoted values (without value substitution). Any variables\ndefined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," object take precedence over those from the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file.\nHere's an example of a supported ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# single line values\nkey1=value 1\nkey2='value 2'   # ignored inline comment\nkey3=\"value 3\"\n\n# multi-line values\nkey4='line 1\nline 2'\nkey5=\"line 1\nline 2\"\n\n# export statements\nexport key6=value 6\n\n# comma delimiter\nkey7:value 6\n\n# keys cannot contain dots or dashes\na.b.key8=value 8   # will be ignored\na-b-key9=value 9   # will be ignored\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for Metals discovery")),(0,o.kt)("p",null,"This option works a bit different than the other two param shapes as you don't\nspecify a test or main class, but rather a ",(0,o.kt)("inlineCode",{parentName:"p"},"runType")," of either ",(0,o.kt)("inlineCode",{parentName:"p"},'"run"'),",\n",(0,o.kt)("inlineCode",{parentName:"p"},'"runOrTestFile"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"testFile"'),", or ",(0,o.kt)("inlineCode",{parentName:"p"},'"testTarget"')," and a file URI representing\nyour current location. ",(0,o.kt)("inlineCode",{parentName:"p"},'"run"')," will automatically find any main method in the\nbuild target that belongs to the URI that was sent in. If multiple are found,\nyou will be given the choice of which to run. ",(0,o.kt)("inlineCode",{parentName:"p"},'"runOrTestFile"')," will try to find\na main or test class in your current file and run them. The ",(0,o.kt)("inlineCode",{parentName:"p"},'"testFile"')," option\nwill check for any test classes in your current file and run them. Similarly,\n",(0,o.kt)("inlineCode",{parentName:"p"},'"testTarget"')," will run all test classes found in the build target that the URI\nbelongs to. The ",(0,o.kt)("inlineCode",{parentName:"p"},'"args"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"jvmOptions"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"env"'),", and ",(0,o.kt)("inlineCode",{parentName:"p"},'"envFile"')," are all valid\nkeys that can be sent as well with the same format as above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "path": "file:///path/to/my/file.scala",\n  "runType": "testTarget"\n}\n')),(0,o.kt)("p",null,"Instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"debug-adapter-start")," if you only want to get data about the command\nto run you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"discover-jvm-run-command"),", which takes the same json as\nabove, but instead of starting the DAP session it will return the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DebugSessionParams")," object containing targets that this main class can be run\nfor along with the data about the main class which will take form of:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "targets": ["id1"],\n  "dataKind": "scala-main-class",\n  "data": {\n    "class": "Foo",\n    "arguments": [],\n    "jvmOptions": [],\n    "environmentVariables": [],\n    "shellCommand": "java ..."\n  }\n}\n')),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"shellCommand")," will be the exact command to run if you want to run it on\nyour own without DAP."),(0,o.kt)("h3",{id:"wiring-it-all-together"},"Wiring it all together"),(0,o.kt)("p",null,"No matter which method you use, you still need to connect the debug adapter\nextension specific to you editor using the aforementioned URI and let it drive\nthe run/debug session. For reference, take a look at the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalameta/metals-vscode/blob/master/src/scalaDebugger.ts"},"vscode implementation"),"\nand how it is\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scalameta/metals-vscode/blob/master/src/extension.ts#L356"},"wired up together")),(0,o.kt)("h2",{id:"supported-testing-frameworks"},"Supported Testing Frameworks"),(0,o.kt)("p",null,"NOTE: While Metals detects test suites for most of existing testing\nframeworks, support for recognizing individual tests is more limited.\nMetals supports the current set of test frameworks when it comes to\nindividual test discovery:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Junit"),(0,o.kt)("li",{parentName:"ul"},"MUnit"),(0,o.kt)("li",{parentName:"ul"},"Scalatest")),(0,o.kt)("h2",{id:"debugging-the-connection"},"Debugging the connection"),(0,o.kt)("p",null,"Create the following trace files to spy on incoming/outgoing JSON communication\nbetween the debug server and editor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# macOS\ntouch ~/Library/Caches/org.scalameta.metals/dap-server.trace.json\ntouch ~/Library/Caches/org.scalameta.metals/dap-client.trace.json\n# Linux\ntouch ~/.cache/metals/dap-server.trace.json\ntouch ~/.cache/metals/dap-client.trace.json\n")))}h.isMDXComponent=!0}}]);